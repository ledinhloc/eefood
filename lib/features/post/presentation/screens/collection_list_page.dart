import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import '../provider/collection_cubit.dart';
import '../provider/collection_state.dart';
import '../../../post/data/models/post_simple_model.dart';
import '../widgets/post/collection_list_widget.dart';
import '../widgets/post/post_summary_card.dart';

class CollectionListPage extends StatefulWidget {
  const CollectionListPage({super.key});

  @override
  State<CollectionListPage> createState() => _CollectionListPageState();
}

class _CollectionListPageState extends State<CollectionListPage> {
  String searchQuery = '';
  bool isExpanded = false;

  @override
  Widget build(BuildContext context) {
    return BlocProvider(
      create: (_) => CollectionCubit()..fetchCollectionsByUser(),
      child: Scaffold(
        backgroundColor: Colors.grey[100],
        body: SafeArea(
          child: BlocBuilder<CollectionCubit, CollectionState>(
            builder: (context, state) {
              if (state.status == CollectionStatus.loading) {
                return const Center(child: CircularProgressIndicator());
              }
              if (state.status == CollectionStatus.failure) {
                return Center(child: Text(state.error ?? "Error"));
              }
              final collections = state.collections;

              // T·ªïng h·ª£p t·∫•t c·∫£ b√†i post
              final List<PostSimpleModel> allRecipes = collections
                  .expand((c) => c.posts ?? [])
                  .cast<PostSimpleModel>()
                  .toList()
                ..sort((a, b) => b.createdAt.compareTo(a.createdAt));

              // L·ªçc danh s√°ch theo t·ª´ kh√≥a nh·∫≠p
              final filteredRecipes = allRecipes.where((recipe) {
                final query = removeDiacritics(searchQuery.toLowerCase());
                final title = removeDiacritics(recipe.title.toLowerCase());
                return title.contains(query);
              }).toList();

              return RefreshIndicator(
                onRefresh: () async {
                  await context.read<CollectionCubit>().fetchCollectionsByUser();
                },
                child: SingleChildScrollView(
                  physics: const AlwaysScrollableScrollPhysics(),
                  padding: const EdgeInsets.all(16),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      // üîπ Thanh t√¨m ki·∫øm
                      TextField(
                        decoration: InputDecoration(
                          prefixIcon: const Icon(Icons.search),
                          hintText: 'T√¨m ki·∫øm m√≥n ƒÉn...',
                          filled: true,
                          fillColor: Colors.white,
                          contentPadding:
                          const EdgeInsets.symmetric(vertical: 0),
                          border: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(20),
                            borderSide: BorderSide.none,
                          ),
                        ),
                        onChanged: (value) {
                          setState(() => searchQuery = value);
                        },
                      ),
                      const SizedBox(height: 12),

                      //  Header "B·ªô s∆∞u t·∫≠p" + n√∫t m·ªü r·ªông
                      Row(
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        children: [
                          const Text(
                            'B·ªô s∆∞u t·∫≠p',
                            style: TextStyle(
                              fontSize: 18,
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                          GestureDetector(
                            onTap: () {
                              setState(() => isExpanded = !isExpanded);
                            },
                            child: Text(
                              isExpanded ? 'Thu g·ªçn' : 'M·ªü r·ªông',
                              style: const TextStyle(
                                color: Colors.grey,
                                fontSize: 14,
                              ),
                            ),
                          ),
                        ],
                      ),
                      const SizedBox(height: 12),

                      // Widget danh s√°ch b·ªô s∆∞u t·∫≠p
                      CollectionListWidget(
                        collections: collections,
                        isExpanded: isExpanded,
                      ),

                      const SizedBox(height: 24),

                      //  Section b√†i vi·∫øt
                      const Text(
                        'G·∫ßn ƒë√¢y',
                        style: TextStyle(
                          fontSize: 18,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                      const SizedBox(height: 12),
                      GridView.builder(
                        physics: const NeverScrollableScrollPhysics(),
                        shrinkWrap: true,
                        gridDelegate:
                        const SliverGridDelegateWithFixedCrossAxisCount(
                          crossAxisCount: 2,
                          childAspectRatio: 0.9,
                          crossAxisSpacing: 5,
                          mainAxisSpacing: 3,
                        ),
                        itemCount: filteredRecipes.length,
                        itemBuilder: (context, index) {
                          final recipe = filteredRecipes[index];
                          return PostSummaryCard(recipe: recipe);
                        },
                      ),
                    ],
                  ),
                ),
              );
            },
          ),
        ),
      ),
    );
  }

  // H√†m lo·∫°i b·ªè d·∫•u ti·∫øng Vi·ªát
  String removeDiacritics(String input) {
    const withDiacritics =
        '√†√°·∫°·∫£√£√¢·∫ß·∫•·∫≠·∫©·∫´ƒÉ·∫±·∫Ø·∫∑·∫≥·∫µ√®√©·∫π·∫ª·∫Ω√™·ªÅ·∫ø·ªá·ªÉ·ªÖ√¨√≠·ªã·ªâƒ©√≤√≥·ªç·ªè√µ√¥·ªì·ªë·ªô·ªï·ªó∆°·ªù·ªõ·ª£·ªü·ª°√π√∫·ª•·ªß≈©∆∞·ª´·ª©·ª±·ª≠·ªØ·ª≥√Ω·ªµ·ª∑·ªπƒë'
        '√Ä√Å·∫†·∫¢√É√Ç·∫¶·∫§·∫¨·∫®·∫™ƒÇ·∫∞·∫Æ·∫∂·∫≤·∫¥√à√â·∫∏·∫∫·∫º√ä·ªÄ·∫æ·ªÜ·ªÇ·ªÑ√å√ç·ªä·ªàƒ®√í√ì·ªå·ªé√ï√î·ªí·ªê·ªò·ªî·ªñ∆†·ªú·ªö·ª¢·ªû·ª†√ô√ö·ª§·ª¶≈®∆Ø·ª™·ª®·ª∞·ª¨·ªÆ·ª≤√ù·ª¥·ª∂·ª∏ƒê';
    const withoutDiacritics =
        'aaaaaaaaaaaaaaaaaeeeeeeeeeeeiiiiiooooooooooooooooouuuuuuuuuuuyyyyyd'
        'AAAAAAAAAAAAAAAAAEEEEEEEEEEEIIIII OOOOOOOOOOOOOOOOOOUUUUUUUUUUUYYYYYD';

    for (int i = 0; i < withDiacritics.length; i++) {
      input = input.replaceAll(withDiacritics[i], withoutDiacritics[i]);
    }
    return input;
  }
}
